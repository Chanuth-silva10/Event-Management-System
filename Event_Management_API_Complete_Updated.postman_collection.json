{
	"info": {
		"_postman_id": "ff89db96-824e-4083-b5b1-5344e0a31175",
		"name": "Event_Management_API_Complete_Updated.postman_collection",
		"description": "Complete API collection for Event Management System with comprehensive test cases for all endpoints. Base URL: http://localhost:8080/api/v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24118288"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('role');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"});",
									"",
									"pm.test('User role is correct', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.role).to.eql('USER');",
									"});",
									"",
									"pm.test('Email matches request', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql('john@example.com');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Chanuth Silva\",\n  \"email\": \"chanuth.silva@techconf.com\",\n  \"password\": \"SecurePass123!\",\n  \"role\": \"USER\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Admin role is correct', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.role).to.eql('ADMIN');",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Sachini Karunaratne\",\n  \"email\": \"sachini.karunaratne@eventmanager.com\",\n  \"password\": \"AdminPass2025!\",\n  \"role\": \"ADMIN\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has JWT token', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.type).to.eql('Bearer');",
									"});",
									"",
									"pm.test('User data is correct', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.email).to.eql('john@example.com');",
									"    pm.expect(jsonData.user.role).to.eql('USER');",
									"});",
									"",
									"// Store the token for subsequent requests",
									"if (pm.response.code === 200) {",
									"    var responseJson = pm.response.json();",
									"    pm.environment.set('user_token', responseJson.token);",
									"    pm.environment.set('user_id', responseJson.user.id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"chanuth.silva@techconf.com\",\n  \"password\": \"SecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Admin token received', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData.user.role).to.eql('ADMIN');",
									"});",
									"",
									"// Store admin token",
									"if (pm.response.code === 200) {",
									"    var responseJson = pm.response.json();",
									"    pm.environment.set('admin_token', responseJson.token);",
									"    pm.environment.set('admin_id', responseJson.user.id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"sachini.karunaratne@eventmanager.com\",\n  \"password\": \"AdminPass2025!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Error response format', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.status).to.eql(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"Kumara@gmail.com\",\n  \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Create Event_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Event created successfully', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('host');",
									"    pm.expect(jsonData).to.have.property('startTime');",
									"    pm.expect(jsonData).to.have.property('endTime');",
									"    pm.expect(jsonData).to.have.property('location');",
									"    pm.expect(jsonData).to.have.property('visibility');",
									"    pm.expect(jsonData).to.have.property('attendeeCount');",
									"});",
									"",
									"pm.test('Event data matches request', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql('Spring Boot Workshop');",
									"    pm.expect(jsonData.visibility).to.eql('PUBLIC');",
									"    pm.expect(jsonData.location).to.eql('Tech Conference Center');",
									"});",
									"",
									"// Store event ID for subsequent tests",
									"if (pm.response.code === 201) {",
									"    var responseJson = pm.response.json();",
									"    pm.environment.set('created_event_id', responseJson.id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Sri Lanka DevOps Community Monthly Meetup\",\n  \"description\": \"Monthly meetup for DevOps practitioners in Sri Lanka. Share experiences, discuss challenges, and network with fellow DevOps engineers. This month's focus: Cloud-native deployments and monitoring.\",\n  \"startTime\": \"2025-10-15T18:30:00\",\n  \"endTime\": \"2025-10-15T21:00:00\",\n  \"location\": \"IFS Towers, Colombo 03\",\n  \"visibility\": \"PUBLIC\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Private Event_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Private event created', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.visibility).to.eql('PRIVATE');",
									"    pm.expect(jsonData.title).to.eql('Team Building Event');",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    var responseJson = pm.response.json();",
									"    pm.environment.set('private_event_id', responseJson.id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Team Building Event\",\n  \"description\": \"Annual team building activities and exercises\",\n  \"startTime\": \"2025-08-20T09:00:00\",\n  \"endTime\": \"2025-08-20T18:00:00\",\n  \"location\": \"Adventure Park\",\n  \"visibility\": \"PRIVATE\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific Event Details_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Event details returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('host');",
									"    pm.expect(jsonData).to.have.property('attendeeCount');",
									"});",
									"",
									"pm.test('Event ID matches requested', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get('created_event_id'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/{{main_conference_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{main_conference_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Event_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Event updated successfully', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql('Updated Spring Boot Workshop');",
									"    pm.expect(jsonData.description).to.include('Updated description');",
									"});",
									"",
									"pm.test('Updated timestamp changed', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('updatedAt');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"TechConf 2025: The Future of Software Development & AI\",\n  \"description\": \"Join us for the most anticipated tech conference of 2025! Featuring keynotes from industry leaders, hands-on workshops, networking sessions, and the latest trends in software development, AI, cloud computing, and more. Special focus on AI integration and the future of development in Sri Lanka.\",\n  \"startTime\": \"2025-09-15T08:00:00\",\n  \"endTime\": \"2025-09-17T18:00:00\",\n  \"location\": \"Convention Center, Colombo, Sri Lanka\",\n  \"visibility\": \"PUBLIC\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events/{{main_conference_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{main_conference_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Event - Unauthorized_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Forbidden error response', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Unauthorized Update Attempt\",\n  \"description\": \"This should fail with 403 Forbidden\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events/{{main_conference_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{main_conference_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Upcoming Events_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Paginated response structure', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('pageable');",
									"    pm.expect(jsonData).to.have.property('totalElements');",
									"    pm.expect(jsonData).to.have.property('totalPages');",
									"    pm.expect(jsonData).to.have.property('size');",
									"    pm.expect(jsonData).to.have.property('number');",
									"});",
									"",
									"pm.test('Content is array', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});",
									"",
									"pm.test('Events have required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.content.length > 0) {",
									"        var event = jsonData.content[0];",
									"        pm.expect(event).to.have.property('id');",
									"        pm.expect(event).to.have.property('title');",
									"        pm.expect(event).to.have.property('startTime');",
									"        pm.expect(event).to.have.property('endTime');",
									"        pm.expect(event).to.have.property('host');",
									"        pm.expect(event).to.have.property('attendeeCount');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/upcoming?page=0&size=20&sort=startTime,asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"upcoming"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": "startTime,asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Paginated response structure', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('pageable');",
									"    pm.expect(jsonData).to.have.property('totalElements');",
									"    pm.expect(jsonData).to.have.property('totalPages');",
									"    pm.expect(jsonData).to.have.property('size');",
									"    pm.expect(jsonData).to.have.property('number');",
									"});",
									"",
									"pm.test('Content is array', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});",
									"",
									"pm.test('Events have required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.content.length > 0) {",
									"        var event = jsonData.content[0];",
									"        pm.expect(event).to.have.property('id');",
									"        pm.expect(event).to.have.property('title');",
									"        pm.expect(event).to.have.property('startTime');",
									"        pm.expect(event).to.have.property('endTime');",
									"        pm.expect(event).to.have.property('host');",
									"        pm.expect(event).to.have.property('attendeeCount');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/upcoming?page=1&size=3&sort=startTime",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"upcoming"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "3"
								},
								{
									"key": "sort",
									"value": "startTime"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Events Sorted by Title - Descending",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Paginated response structure', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('pageable');",
									"    pm.expect(jsonData).to.have.property('totalElements');",
									"    pm.expect(jsonData).to.have.property('totalPages');",
									"    pm.expect(jsonData).to.have.property('size');",
									"    pm.expect(jsonData).to.have.property('number');",
									"});",
									"",
									"pm.test('Content is array', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});",
									"",
									"pm.test('Events have required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.content.length > 0) {",
									"        var event = jsonData.content[0];",
									"        pm.expect(event).to.have.property('id');",
									"        pm.expect(event).to.have.property('title');",
									"        pm.expect(event).to.have.property('startTime');",
									"        pm.expect(event).to.have.property('endTime');",
									"        pm.expect(event).to.have.property('host');",
									"        pm.expect(event).to.have.property('attendeeCount');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/upcoming?page=0&size=10&sort=title,desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"upcoming"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sort",
									"value": "title,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Events with Filters - check error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Filtered results returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});",
									"",
									"pm.test('Location filter applied', function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.content.length > 0) {",
									"        jsonData.content.forEach(function(event) {",
									"            pm.expect(event.location.toLowerCase()).to.include('tech');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events?location=Sri Lanka&page=0&size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "location",
									"value": "Sri Lanka"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Events with Date Range Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Date range filter applied', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});",
									"",
									"pm.test('Events within date range', function () {",
									"    var jsonData = pm.response.json();",
									"    var startDate = new Date('2025-08-01T00:00:00');",
									"    var endDate = new Date('2025-08-31T23:59:59');",
									"    ",
									"    if (jsonData.content.length > 0) {",
									"        jsonData.content.forEach(function(event) {",
									"            var eventStartTime = new Date(event.startTime);",
									"            pm.expect(eventStartTime.getTime()).to.be.at.least(startDate.getTime());",
									"            pm.expect(eventStartTime.getTime()).to.be.at.most(endDate.getTime());",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events?startDate=2025-08-01T00:00:00&endDate=2025-08-31T23:59:59&page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2025-08-01T00:00:00"
								},
								{
									"key": "endDate",
									"value": "2025-08-31T23:59:59"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Hosted Events_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Hosted events returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});",
									"",
									"pm.test('All events are hosted by current user', function () {",
									"    var jsonData = pm.response.json();",
									"    var userId = pm.environment.get('user_id');",
									"    ",
									"    if (jsonData.content.length > 0) {",
									"        jsonData.content.forEach(function(event) {",
									"            pm.expect(event.host.id).to.eql(userId);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/events/my-hosted?page=0&size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"my-hosted"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Attending Events_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Attending events returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/events/my-attending?page=0&size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"my-attending"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My All Events (Hosted + Attending)_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('All user events returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/events/my-events?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"my-events"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Event(by Host)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test('No content returned', function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/events/{{private_event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{private_event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to Delete Event by Non-Host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test('No content returned', function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/events/{{private_event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{private_event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Can Delete Any Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test('No content returned', function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/events/{{private_event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{private_event_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Attendance",
			"item": [
				{
					"name": "RSVP to Event - GOING_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Attendance created successfully', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('event');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('respondedAt');",
									"});",
									"",
									"pm.test('RSVP status is GOING', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('GOING');",
									"});",
									"",
									"pm.test('Event ID matches', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.event.id).to.eql(pm.environment.get('created_event_id'));",
									"});",
									"",
									"pm.test('User ID matches', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.id).to.eql(pm.environment.get('user_id'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventId\": \"{{main_conference_id}}\",\n  \"status\": \"GOING\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/attendances",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendances"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update RSVP to MAYBE_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('RSVP status updated to MAYBE', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('MAYBE');",
									"});",
									"",
									"pm.test('Responded at timestamp updated', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('respondedAt');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventId\": \"{{networking_lunch_id}}\",\n  \"status\": \"MAYBE\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/attendances",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendances"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update RSVP to DECLINED_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('RSVP status updated to DECLINED', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('DECLINED');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventId\": \"{{vip_dinner_id}}\",\n  \"status\": \"DECLINED\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/attendances",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendances"
							]
						}
					},
					"response": []
				},
				{
					"name": "RSVP with Invalid Event ID_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Event not found error', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"status\": \"GOING\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/attendances",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendances"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Event Attendances (Admin Only)_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Event attendances returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});",
									"",
									"pm.test('Attendances for specific event', function () {",
									"    var jsonData = pm.response.json();",
									"    var eventId = pm.environment.get('created_event_id');",
									"    ",
									"    if (jsonData.content.length > 0) {",
									"        jsonData.content.forEach(function(attendance) {",
									"            pm.expect(attendance.event.id).to.eql(eventId);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/attendances/event/{{main_conference_id}}?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendances",
								"event",
								"{{main_conference_id}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Attendances_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Paginated attendances returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('pageable');",
									"    pm.expect(jsonData).to.have.property('totalElements');",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});",
									"",
									"pm.test('Attendance records have required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.content.length > 0) {",
									"        var attendance = jsonData.content[0];",
									"        pm.expect(attendance).to.have.property('event');",
									"        pm.expect(attendance).to.have.property('user');",
									"        pm.expect(attendance).to.have.property('status');",
									"        pm.expect(attendance).to.have.property('respondedAt');",
									"    }",
									"});",
									"",
									"pm.test('All attendances belong to current user', function () {",
									"    var jsonData = pm.response.json();",
									"    var userId = pm.environment.get('user_id');",
									"    ",
									"    if (jsonData.content.length > 0) {",
									"        jsonData.content.forEach(function(attendance) {",
									"            pm.expect(attendance.user.id).to.eql(userId);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/attendances/my-attendances?page=0&size=20&sort=respondedAt,desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendances",
								"my-attendances"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": "respondedAt,desc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Edge Cases & Error Handling",
			"item": [
				{
					"name": "Get Non-existent Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Error response structure', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData.status).to.eql(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/events/123e4567-e89b-12d3-a456-426614174000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"123e4567-e89b-12d3-a456-426614174000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event with Invalid UUID Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Validation error response', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/events/invalid-uuid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"invalid-uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Large Page Size Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Page size handled correctly', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('size');",
									"    pm.expect(jsonData).to.have.property('content');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/upcoming?page=0&size=1000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"upcoming"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid JWT Token_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Unauthorized response', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid.jwt.token"
							}
						],
						"url": {
							"raw": "{{base_url}}/events/{{main_conference_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{main_conference_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Event - Should Return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Event not found error', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql(404);",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/events/{{private_event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{private_event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Event Attendances - Forbidden for User_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Access denied error', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/attendances/event/{{main_conference_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendances",
								"event",
								"{{main_conference_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event - Unauthorized_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Unauthorized error response', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Unauthorized Event\",\n  \"description\": \"This should fail\",\n  \"startTime\": \"2025-08-15T10:00:00\",\n  \"endTime\": \"2025-08-15T17:00:00\",\n  \"location\": \"Nowhere\",\n  \"visibility\": \"PUBLIC\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event - Invalid Data_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Validation error response', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('validationErrors');",
									"    pm.expect(jsonData.status).to.eql(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"\",\n  \"description\": \"Event with empty title should fail\",\n  \"startTime\": \"2025-08-01T10:00:00\",\n  \"endTime\": \"2025-08-01T09:00:00\",\n  \"location\": \"Test Location\",\n  \"visibility\": \"PUBLIC\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event with Past Date - Error Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Validation error response', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('validationErrors');",
									"    pm.expect(jsonData.status).to.eql(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Past Event\",\n  \"description\": \"This should fail due to past date\",\n  \"startTime\": \"2025-01-01T10:00:00\",\n  \"endTime\": \"2025-01-01T12:00:00\",\n  \"location\": \"Test Location\",\n  \"visibility\": \"PUBLIC\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event with End Time Before Start Time - Error Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Validation error response', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('validationErrors');",
									"    pm.expect(jsonData.status).to.eql(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Invalid Time Event\",\n  \"description\": \"End time is before start time\",\n  \"startTime\": \"2025-08-15T17:00:00\",\n  \"endTime\": \"2025-08-15T09:00:00\",\n  \"location\": \"Test Location\",\n  \"visibility\": \"PUBLIC\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "RSVP without Authentication_",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Unauthorized error', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventId\": \"{{main_conference_id}}\",\n  \"status\": \"GOING\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/attendances",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attendances"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{admin_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8080/api/v1');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response time",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Global test to check content type for JSON responses",
					"if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
					"    pm.test('Content-Type is application/json', function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080/api/v1",
			"type": "string"
		},
		{
			"key": "rikaz_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_event_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "private_event_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "shamilka_token",
			"value": "",
			"type": "default"
		},
		{
			"key": "chanuth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "asanka_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "seethoda_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "main_conference_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "spring_boot_workshop_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "networking_lunch_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "vip_dinner_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "ai_workshop_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "devops_workshop_id",
			"value": "",
			"type": "string"
		}
	]
}