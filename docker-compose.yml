version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: event-management-db
    environment:
      POSTGRES_DB: event_management
      POSTGRES_USER: event_user
      POSTGRES_PASSWORD: event_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - event-management-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U event_user -d event_management"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: event-management-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - event-management-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: event-management-app
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/event_management
      SPRING_DATASOURCE_USERNAME: event_user
      SPRING_DATASOURCE_PASSWORD: event_password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      APP_JWT_SECRET: mySecretKey12345678901234567890123456789012345678901234567890
      APP_RATE_LIMIT_ENABLED: true
      APP_RATE_LIMIT_REQUESTS_PER_MINUTE: 100
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - event-management-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  redis_data:

networks:
  event-management-network:
    driver: bridge
