{
	"info": {
		"_postman_id": "1a2b3c4d-5e6f-7890-abcd-123456789012",
		"name": "Event Management API - New Collection",
		"description": "Comprehensive API collection for Event Management System with complete CRUD operations, authentication, and filtering capabilities. Base URL: http://localhost:8080/api/v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "new_exporter"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('user_id', responseJson.id);",
									"    pm.test('User registered successfully', function () {",
									"        pm.expect(responseJson.email).to.eql(pm.variables.get('test_user_email'));",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{test_user_name}}\",\n    \"email\": \"{{test_user_email}}\",\n    \"password\": \"{{test_user_password}}\",\n    \"role\": \"USER\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user account in the system"
					},
					"response": []
				},
				{
					"name": "Register Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('admin_id', responseJson.id);",
									"    pm.test('Admin user registered successfully', function () {",
									"        pm.expect(responseJson.role).to.eql('ADMIN');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{admin_user_name}}\",\n    \"email\": \"{{admin_user_email}}\",\n    \"password\": \"{{admin_user_password}}\",\n    \"role\": \"ADMIN\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new admin user account"
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('user_token', responseJson.token);",
									"    pm.test('User login successful', function () {",
									"        pm.expect(responseJson.type).to.eql('Bearer');",
									"        pm.expect(responseJson.token).to.not.be.empty;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_user_email}}\",\n    \"password\": \"{{test_user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and get JWT token"
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('admin_token', responseJson.token);",
									"    pm.test('Admin login successful', function () {",
									"        pm.expect(responseJson.user.role).to.eql('ADMIN');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_user_email}}\",\n    \"password\": \"{{admin_user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Authenticate admin user and get JWT token"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration and login"
		},
		{
			"name": "Event Management",
			"item": [
				{
					"name": "Create Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('created_event_id', responseJson.id);",
									"    pm.test('Event created successfully', function () {",
									"        pm.expect(responseJson.title).to.not.be.empty;",
									"        pm.expect(responseJson.host).to.not.be.null;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tech Conference 2025\",\n    \"description\": \"A comprehensive technology conference covering latest trends in software development, AI, and cloud computing.\",\n    \"startTime\": \"2025-08-15T09:00:00\",\n    \"endTime\": \"2025-08-15T17:00:00\",\n    \"location\": \"Convention Center, Downtown\",\n    \"visibility\": \"PUBLIC\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						},
						"description": "Create a new public event"
					},
					"response": []
				},
				{
					"name": "Create Private Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('private_event_id', responseJson.id);",
									"    pm.test('Private event created successfully', function () {",
									"        pm.expect(responseJson.visibility).to.eql('PRIVATE');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Private Team Meeting\",\n    \"description\": \"Internal team discussion about project roadmap and strategy.\",\n    \"startTime\": \"2025-08-20T14:00:00\",\n    \"endTime\": \"2025-08-20T16:00:00\",\n    \"location\": \"Conference Room A\",\n    \"visibility\": \"PRIVATE\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						},
						"description": "Create a new private event"
					},
					"response": []
				},
				{
					"name": "Get Event Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Event details retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.id).to.not.be.empty;",
									"    pm.expect(responseJson.title).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/{{created_event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{created_event_id}}"
							]
						},
						"description": "Get details of a specific event"
					},
					"response": []
				},
				{
					"name": "Update Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Event updated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.title).to.include('Updated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Tech Conference 2025\",\n    \"description\": \"Updated description with more exciting content and new speakers.\",\n    \"location\": \"Grand Convention Center, Downtown\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events/{{created_event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{created_event_id}}"
							]
						},
						"description": "Update an existing event (only host or admin can update)"
					},
					"response": []
				},
				{
					"name": "Delete Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Event deleted successfully', function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/{{private_event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{private_event_id}}"
							]
						},
						"description": "Soft delete an event (only host or admin can delete)"
					},
					"response": []
				},
				{
					"name": "Get Event Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Event status retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.eventId).to.not.be.empty;",
									"    pm.expect(responseJson.status).to.be.oneOf(['UPCOMING', 'ONGOING', 'COMPLETED', 'CANCELLED']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/{{created_event_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{created_event_id}}",
								"status"
							]
						},
						"description": "Get event status with attendance information"
					},
					"response": []
				}
			],
			"description": "Core event management operations"
		},
		{
			"name": "Event Queries & Filtering",
			"item": [
				{
					"name": "Get All Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Events retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.content).to.be.an('array');",
									"    pm.expect(responseJson.totalElements).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events?page=0&size=10&sort=startTime,asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sort",
									"value": "startTime,asc"
								}
							]
						},
						"description": "Get all public events with pagination and sorting"
					},
					"response": []
				},
				{
					"name": "Get Events with Location Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Filtered events retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.content).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events?location=Convention&page=0&size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "location",
									"value": "Convention"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						},
						"description": "Filter events by location (partial match)"
					},
					"response": []
				},
				{
					"name": "Get Events with Date Range Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Date filtered events retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.content).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events?startDate=2025-08-01T00:00:00&endDate=2025-08-31T23:59:59&page=0&size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2025-08-01T00:00:00"
								},
								{
									"key": "endDate",
									"value": "2025-08-31T23:59:59"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						},
						"description": "Filter events by date range"
					},
					"response": []
				},
				{
					"name": "Get Events with Visibility Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Visibility filtered events retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.content).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events?visibility=PUBLIC&page=0&size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "visibility",
									"value": "PUBLIC"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						},
						"description": "Filter events by visibility (PUBLIC/PRIVATE)"
					},
					"response": []
				},
				{
					"name": "Get Upcoming Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Upcoming events retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.content).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/upcoming?page=0&size=20&sort=startTime,asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"upcoming"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": "startTime,asc"
								}
							]
						},
						"description": "Get all upcoming public events"
					},
					"response": []
				}
			],
			"description": "Event filtering and querying endpoints"
		},
		{
			"name": "User Event Management",
			"item": [
				{
					"name": "Get My Hosted Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Hosted events retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.content).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/my-hosted?page=0&size=20&sort=startTime,desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"my-hosted"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": "startTime,desc"
								}
							]
						},
						"description": "Get all events hosted by the authenticated user"
					},
					"response": []
				},
				{
					"name": "Get My Attending Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Attending events retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.content).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/my-attending?page=0&size=20&sort=startTime,asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"my-attending"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": "startTime,asc"
								}
							]
						},
						"description": "Get all events the authenticated user is attending"
					},
					"response": []
				},
				{
					"name": "Get All My Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User events retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.content).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/my-events?page=0&size=20&sort=startTime,desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"my-events"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": "startTime,desc"
								}
							]
						},
						"description": "Get all events related to the authenticated user (both hosted and attending)"
					},
					"response": []
				}
			],
			"description": "User-specific event management endpoints"
		},
		{
			"name": "Error Handling & Edge Cases",
			"item": [
				{
					"name": "Create Event - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid data returns 400', function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"\",\n    \"startTime\": \"2024-01-01T09:00:00\",\n    \"endTime\": \"2024-01-01T08:00:00\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						},
						"description": "Test validation with invalid event data"
					},
					"response": []
				},
				{
					"name": "Get Event - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Event not found returns 404', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Test accessing non-existent event"
					},
					"response": []
				},
				{
					"name": "Update Event - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthorized update returns 401 or 403', function () {",
									"    pm.expect([401, 403]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Unauthorized Update\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/events/{{created_event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{created_event_id}}"
							]
						},
						"description": "Test updating event without authentication"
					},
					"response": []
				},
				{
					"name": "Access Private Event - Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Private event access forbidden', function () {",
									"    pm.expect([401, 403, 404]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/{{private_event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{private_event_id}}"
							]
						},
						"description": "Test accessing private event as different user"
					},
					"response": []
				}
			],
			"description": "Test error scenarios and edge cases"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{user_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script for the entire collection",
					"// Can be used for global setup"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for the entire collection",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has JSON content-type', function () {",
					"    if (pm.response.code !== 204) {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    }",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080/api/v1",
			"type": "string"
		},
		{
			"key": "test_user_name",
			"value": "John Doe",
			"type": "string"
		},
		{
			"key": "test_user_email",
			"value": "john.doe@example.com",
			"type": "string"
		},
		{
			"key": "test_user_password",
			"value": "securepassword123",
			"type": "string"
		},
		{
			"key": "admin_user_name",
			"value": "Admin User",
			"type": "string"
		},
		{
			"key": "admin_user_email",
			"value": "admin@example.com",
			"type": "string"
		},
		{
			"key": "admin_user_password",
			"value": "adminpassword123",
			"type": "string"
		},
		{
			"key": "user_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_event_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "private_event_id",
			"value": "",
			"type": "string"
		}
	]
}
